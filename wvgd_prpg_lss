"""
Author: Mohammad H. Tahersima; January 2019
All Rights Reserved

Experimental data analysis and plot: Waveguide Propagation Loss
- Read a waveguide position and length in a map file
- Find data files according to the map file
- Plot and fit data, find peak of fit

To run you need "waveguide_loss" folder containing loss txt file in the same 
folder as this waveguide_loss.py script

"""
## ---------------------------------------------------------------------------
##-------- PACKAGES  -----------
## ---------------------------------------------------------------------------
import re
from pathlib import Path
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
from matplotlib.pyplot import cm
## ---------------------------------------------------------------------------
##-------- FUNCTIONS  -----------
## ---------------------------------------------------------------------------
def init_plotting():
    plt.rcParams['figure.figsize'] = (5, 5)
    plt.rcParams['font.size'] = 14
    plt.rcParams['font.family'] = 'Helvetica'
    plt.rcParams['axes.labelsize'] = plt.rcParams['font.size']
    plt.rcParams['axes.titlesize'] = 1.5*plt.rcParams['font.size']
    plt.rcParams['legend.fontsize'] = plt.rcParams['font.size']
    plt.rcParams['xtick.labelsize'] = plt.rcParams['font.size']
    plt.rcParams['ytick.labelsize'] = plt.rcParams['font.size']
    plt.rcParams['savefig.dpi'] = 300
    plt.rcParams['legend.loc'] = 'lower left'
    plt.rcParams['axes.linewidth'] = 1
    plt.rcParams['image.cmap'] = 'viridis'
    plt.gca().xaxis.set_ticks_position('bottom')
    plt.gca().yaxis.set_ticks_position('left')
    
def get_device():
    
    file_map= r"C:\Users\taher\OneDrive\JOB\2019\Photonics\Elenion\Test\waveguide_loss\wg_loss_map.txt" 
    pos_x_arr = []
    pos_y_arr = []
    wg_length_arr = []
    with open(file_map) as f:   # open the text file / closes when session ends
        string = f.read()
        pos = re.findall('\(([^)]+)', string)
        regex = re.compile('length=([0-9]*)')
        length = regex.findall(string)
        for item in pos:
            xx, yy = map(int, item.strip('()').split(','))
            pos_x_arr.append(xx)
            pos_y_arr.append(yy)
        wg_length_arr = list(map(int,length))
        
    return pos_x_arr, pos_y_arr, wg_length_arr    

def get_data(xx, yy):
    data_folder = Path(r"C:/Users/taher/OneDrive/JOB/2019/Photonics/Elenion/Test/waveguide_loss")
    filename = 'die_-1_1_device_'+ str(xx) +'_' + str(yy)+'.txt'
    file_to_open = data_folder / filename
    
    if not file_to_open.exists():
        print("Oops, file doesn't exist!")
    else:
        print("Yay, {} file exists!".format(filename))
    
    wl=[]; op=[]
    with open(file_to_open) as f:   # open file / closes when session ends
        for _ in range(8):  #skip first the lines in range
            next(f)
        k=0
        for line in f:
            win=line.split()
            xin=float(win[0])
            yin=float(win[1])
            wl.append(xin)
            op.append(yin)
            k=k+1
    
    return wl, op

def fit(wavelength, power, order):
    
    fit = np.polyfit(wavelength, power, order)
    fit = np.poly1d(fit)
    x_fit = np.linspace(wavelength[0], wavelength[-1], 1000)
    y_fit = fit(x_fit)
    
    return x_fit, y_fit

## ---------------------------------------------------------------------------
##-------- GET DATA, PROCESS -----------
## ---------------------------------------------------------------------------
coor_x, coor_y, X = get_device() # X array contains device lengths

init_plotting()
color=iter(cm.seismic(np.linspace(0,1,len(X))))
Y =[] # Y array contains Transmission Peaks
for ii in range (len(X)):
    print ("\nNow processign the device at x = {}, y = {}".format(coor_x[ii], coor_y[ii]))
    wavelength, power = get_data (coor_x[ii],coor_y[ii])
    x_fit, y_fit = fit(wavelength, power, 3)
    print ('Fitted peak power is = {}'.format(np.amax(y_fit)))
    Y.append (np.amax(y_fit))
    plt.plot(wavelength,power, c = next(color), alpha=.6, linewidth=2, label=str(X[ii]))
    plt.plot(x_fit,y_fit, c = 'k' , linewidth=1)
plt.xlabel("Wavelength [$nm$]")
plt.ylabel("Optical Power [$dBm$]")
plt.legend(bbox_to_anchor=(1.1, .4))
plt.show()

Xx_fit, Yy_fit = fit(X, Y, 1)
slope, intercept, r_value, p_value, std_err = stats.linregress(X,Y)
plt.plot(X, Y, 'ro')
plt.plot(Xx_fit, Yy_fit, '--k')
plt.xlabel("Device Length [$\mu m$]")
plt.ylabel("Optical Power Peaks [$dBm$]")
plt.legend(bbox_to_anchor=(1.1, .4))
plt.show()

print("The propagation loss is = {} [dB/cm]".format(slope*10**4))
